---
title: ""
---

[Hier geht es zurück zur Übersicht der Projekte](projects.qmd)

# Gruppenzuweisung

Ich habe für meine Seminare ein kleines Programm geschrieben, welches Studierenden(gruppen) zu Seminarthemen zuordnet, indem es die Rankings, die die Studierenden den Themen geben, optimiert.

Es funktioniert so, dass eine quadratische Matrix über eine Excel Datei eingegeben wird mit den Personen(gruppen) in den Zeilen und den Themen in den Spalten. Jede Gruppe gibt jedem Thema ein Ranking (1 = bestes Thema). Falls nicht alle Themen geranked werden soll, werden die Themen, bei denen fehlende Werte stehen, auf 20 gesetzt. Die Excel Datei braucht zur Eingabe sowohl Spalten- als auch Zeilenbeschriftungen.

Der Algorithmus nimmt dann diese Matrix und versucht, durch Permutationen die Summe der Diagonalen zu minimieren. Hierfür wird die Reihenfolge der Spalten zufällig geändert und die Zuordnung sowie die Summe gespeichert. Nach der angegebenen Anzahl an Permutationen wird dann die Konstellation mit der niedrigsten Summe ausgewählt und als Ergebnis dargestellt. Per default sind 1.000 Permutationen eingestellt, die ich je nach Gruppengröße anpassen würde. Für meine Seminare mit ca. 10 Gruppen und Themen funktionieren bei mir ca. 50.000 Permutationen sehr gut. Auch per default eingestellt ist der lineare Modus, der jedem Ranking ein lineares Gewicht gibt. Es wird hierbei also nicht unterschieden, ob eine niedrige Summe dadurch zustande kommt, dass alle Themen mit Priorität 1 vergeben werden, dadurch aber ein Thema nur mit Priorität 9 vergeben wird, oder ob die Prioritäten insgesamt eher bei 2 liegen. Um niedrige Rankings stärker zu bestrafen, gibt es den quadratischen Modus. Hierbei werden die Rankings quadriert, dann wird die Optimierung vorgenommen und erst am Ende wird wieder auf das Originalranking zurückgerechnet. Vielleicht werden dadurch einzelne Rankings niedriger, insgesamt kommt es dadurch aber seltener dazu, dass niedrige Rankings vergeben werden.

In meinen Seminaren letztes Jahr konnte ich dadurch allen Studierendengruppen die Themen so zuordnen, dass alle ihre 1.-4. Präferenz bekommen haben. Durch die so große Anzahl an Möglichkeiten ist es hilfreich, mehrmals das Programm durchlaufen zu lassen (auch bei 50.000 Permutationen) und dann sowohl auf die höchste vergebene Priorität als auch auf die Gesamtsumme zu schauen, um beides zu minimieren.

Hier findet ihr das Programm, unten ist noch ein detaillierteres Beispiel dargestellt.

```{=html}

<style>
    #myFrame {width:100%}
</style>

<iframe height="800" src="https://corneliusholler.shinyapps.io/gruppenzuweisung/" id="myFrame">
</iframe>

```

## Beispiel

Die Daten für das Beispiel sind Originalrankings aus einem meiner Seminare. Hier ein Überblick:

![](Attachments/Pictures/group_assignment_example_data.png){fig-align="center" width="100%"}

Die beste Konstellation, die ich für diese Daten finden konnte, war mit 50.000 Permutationen und dem quadratischen Modus:

![](Attachments/Pictures/group_assignment_example_res.png){fig-align="center" width="100%"}

Hierfür habe ich einige Male das Programm durchlaufen lassen, indem ich häufiger auf "Run Optimization" geklickt habe.

Probier das Programm mit den Beispieldaten gerne aus, vielleicht findest du ja noch eine niedrigere Gesamtsumme! Hier findest du die [Daten](/Attachments/Documents/group_assignment_example.xlsx).
